{"version":3,"sources":["Login.js","Register.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","react_default","a","createElement","className","autoComplete","onSubmit","type","name","onChange","value","username","placeholder","password","href","onClick","toggle","Register","email","cpassword","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","defineProperty","target","register","errors","login","attemptLogin","onLogin","preventDefault","push","onRegister","console","log","_this$state","state","length","test","at","indexOf","dot","lastIndexOf","map","error","src_Login","src_Register","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.813b0bfb.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nfunction Login(props) {\n        return ( \n            <div className=\"Card\">\n                <h1>Login</h1>\n                <form autoComplete=\"off\" onSubmit={props.onSubmit}>\n                  <input type=\"text\" name=\"username\" onChange={props.onChange} value={props.username} placeholder=\"Username\"/>\n                  <input type=\"password\" name=\"password\" onChange={props.onChange} placeholder=\"Password\" value={props.password}/>\n                  <button className=\"Button\" type=\"submit\">Login</button>\n                </form>\n                <button className=\"Link\" href=\"google.com\" onClick={props.toggle}>New here? Consider creating an account!</button>\n            </div>\n         );\n}\n\nexport default Login;\n\n\n","import React, { Component } from 'react';\n\n\nfunction Register(props) {\n        return ( \n            <div className=\"Card\" >\n                <h1>Register</h1>\n                <form autoComplete=\"off\" onSubmit={props.onSubmit}>\n                  <input type=\"text\" name=\"username\" onChange={props.onChange} value={props.username} placeholder=\"Username\"/>\n                  <input type=\"email\" name=\"email\" onChange={props.onChange} value={props.email} placeholder=\"Email\"/>\n                  <input type=\"password\" name=\"password\"  onChange={props.onChange} value={props.password} placeholder=\"Password\"/>\n                  <input type=\"password\" name=\"cpassword\" onChange={props.onChange} value={props.cpassword} placeholder=\"Confirm Password\"/>\n                  <button className=\"Button\" type=\"submit\">Create Account</button>\n                </form>\n                <button className=\"Link\" href=\"google.com\" onClick={props.toggle}>Already have an account? Login here!</button>\n              </div>\n         );\n}\n\nexport default Register;","import React, {Component} from 'react';\nimport './App.css';\nimport Login from './Login.js'\nimport Register from './Register.js'\n\nclass App extends Component{\n  \n  constructor(props){\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      email: '',\n      cpassword: '',\n      login: true,\n      errors: []\n    }\n  }\n  onChange = (event) => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  register = ()=>{\n    this.setState({username:'', email: '', password:'',cpassword:'',errors:[],  login: false})\n  }\n  \n  login = ()=>{\n    this.setState({password:'', cpassword:'',errors:[], login: true})\n  }\n\n  attemptLogin = () =>{\n      //Usually pings the server. Returns false right now for testing\n      return false;\n  }\n\n  onLogin = (event)=>{\n    event.preventDefault();\n    let errors = []\n    if(this.attemptLogin()){\n      //Code to execute after login\n    }\n    else{\n      //Display Error\n      errors.push(\"Invalid credentials\")\n    }\n    this.setState({errors})\n  }\n  onRegister = (event)=>{\n    event.preventDefault();\n    console.log(event.target);\n    const {username, email, password, cpassword} = this.state;\n\n    let errors = [];\n    //User name testing\n    if(username.length==0){\n      errors.push(\"Username cannot be empty\") \n    }\n    else if(username.length<5){\n      errors.push(\"Username must be atleast 5 characters long\") \n    }\n    else if(!/^[a-z0-9]+$/.test(username)){\n      errors.push(\"Username can contain only a-z and 0-9\")\n    }\n    //Email Testing\n\n    let at = email.indexOf(\"@\")\n    let dot = email.lastIndexOf(\".\")\n    if(email.length==0){\n      errors.push(\"Email cannot be empty\") \n    }\n    else if(at==-1 || dot==-1 || dot<at){\n      errors.push(\"Invalid Email Format\") \n    }\n    //Password testing\n    if(password.length==0){\n      errors.push(\"Password cannot be empty\") \n    }\n    else if(password.length<5){\n      errors.push(\"Password must be atleast 5 characters long\") \n    }\n    else if(password!=cpassword){\n      errors.push(\"Passwords do not match\") \n      this.setState({cpassword:\"\"})\n    }\n\n\n    // let errors = [...this.state.errors, ...newErrors]\n    this.setState({errors})\n    if(errors.length==0){\n      this.login()\n    }\n    console.log(username, email, password, cpassword)\n  }\n  render(){\n\n      return (\n        <div className=\"App\">\n          <div className=\"App-header\">\n            {this.state.errors.length>0 &&\n            <ul className=\"ErrorList\">\n              {\n                this.state.errors.map((error)=><li>{error}</li>)\n              }\n            </ul>\n            }\n              {\n                (this.state.login)? \n                <Login \n                onChange={this.onChange}\n                onSubmit={this.onLogin} \n                toggle={this.register}\n                username={this.state.username}\n                password={this.state.password}\n                />\n                :\n                <Register \n                onChange={this.onChange}\n                onSubmit={this.onRegister} \n                toggle={this.login}\n                username={this.state.username}\n                password={this.state.password}\n                cpassword={this.state.cpassword}\n                email={this.state.email}\n                />\n              }\n          </div>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}